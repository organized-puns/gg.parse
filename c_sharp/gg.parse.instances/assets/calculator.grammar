/* 
 * Simple EBNF-like notation for the grammar of a simple calculator
 */

#expression		   = valid_expression | unknown_expression;

#valid_expression  = operation | value;

#value             = number | group;

#number			   = float | int;

// group needs to produce an annotation, if it's transitive the precedence parsing will happily move the expression
// up the ast tree, removing the effect of a group
group             = ~group_start, expression, ~group_end;

#operation         = multiplication / division / addition / subtraction;

multiplication 100 = value, mult,  value;
division       75  = value, div,   value;
addition       50  = value, plus,  value;
subtraction    25  = value, minus, value;

unknown_expression = error "unknown expression found." valid_expression;