{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "gg.parse.script",
  "scopeName": "source.gg.parse",
  "fileTypes": [
    "grammar",
    "tokens"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.mycustom",
          "match": "//.*$"
        },
        {
          "name": "comment.block.mycustom",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.mycustom",
          "match": "\\b(if|else|while|for|return|break|continue)\\b"
        },
        {
          "name": "keyword.other.mycustom",
          "match": "\\b(let|const|var|function)\\b"
        },
        {
          "name": "constant.language.mycustom",
          "match": "\\b(true|false|null|undefined)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.mycustom",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.mycustom",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.mycustom",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.mycustom",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.mycustom",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hex.mycustom",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.mycustom",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.mycustom",
          "match": "\\+|\\-|\\*|\\/|%"
        },
        {
          "name": "keyword.operator.comparison.mycustom",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.mycustom",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment.mycustom",
          "match": "="
        }
      ]
    }
  }
}