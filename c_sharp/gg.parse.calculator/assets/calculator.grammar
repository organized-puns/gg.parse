/* 
 * Simple EBNF-like notation for the grammar of a simple calculator
 */

#expression		   = eof | +(operation | term | unknown_expression);

eof				   = !.;

#term			   = unary_operation | number | group;

unary_operation    = (plus | minus), term;

// group needs to produce an annotation, if it's transitive the precedence parsing will happily move the expression
// up the ast tree, removing the effect of a group
group             = ~group_start, expression, ~group_end;

#operation         = multiplication / division / addition / subtraction;

multiplication 100 = term, mult,  term;
division       75  = term, div,   term;
addition       50  = term, plus,  term;
subtraction    25  = term, minus, term;

unknown_expression = error "unknown expression found." if *(!(operation | term), .);